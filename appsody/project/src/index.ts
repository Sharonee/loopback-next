// Copyright IBM Corp. 2019. All Rights Reserved.
// This file is licensed under the Apache-2.0 License.
// License text available at http://www.apache.org/licenses/LICENSE-2.0

import {Bootable} from '@loopback/boot';
import {ApplicationConfig, Constructor} from '@loopback/core';
import {HealthComponent} from '@loopback/extension-health';
import {MetricsComponent} from '@loopback/extension-metrics';
import {RestApplication} from '@loopback/rest';
import * as path from 'path';

/**
 * A bootable REST application
 */
export type BootableRestApplication = RestApplication & Bootable;

/**
 * Configuration for an application generated by Appsody with LoopBack stack
 */
export interface AppsodyApplicationConfig extends ApplicationConfig {
  /**
   * Appliction class from the appsody stack template
   */
  applicationClass: Constructor<RestApplication & Bootable>;
  /**
   * Root directory for the appsdody application generated from a stack template
   */
  applicationProjectRoot: string;
}

/**
 * Create a new instance of the application, boot it from the root directory
 * of the application, and start it.
 * @param appConfig - Configuration for the application
 */
export async function createApplication(appConfig: AppsodyApplicationConfig) {
  // Set the current directory to the user-app module
  process.chdir(appConfig.applicationProjectRoot);
  const app = new appConfig.applicationClass(appConfig);
  app.component(HealthComponent);
  app.component(MetricsComponent);
  await app.boot();
  await app.start();

  const url = app.restServer.url;
  console.log(`Server is running at ${url}`);
  console.log(`Try ${url}/ping`);

  return app;
}

/**
 * Run an application generated by Appsody with LoopBack stack
 * @param applicationProjectRoot - Root directory of the application project.
 * Defaults to `./user-app`.
 */
export function main(applicationProjectRoot?: string) {
  applicationProjectRoot =
    applicationProjectRoot || path.join(process.cwd(), './user-app');
  const applicationClass = require(applicationProjectRoot).DemoApplication;
  // Run the application
  const config = {
    applicationProjectRoot,
    applicationClass,
    rest: {
      port: +(process.env.PORT || 3000),
      host: process.env.HOST,
      openApiSpec: {
        // useful when used with OASGraph to locate your application
        setServersFromRequest: true,
      },
    },
  };
  createApplication(config).catch(err => {
    console.error('Cannot start the application.', err);
    process.exit(1);
  });
}
